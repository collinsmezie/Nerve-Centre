// src/companies/schemas/company.schema.ts
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { IsBoolean, IsDateString, IsEnum, IsString } from 'class-validator';
import { REGION_ENUM, LICENSE_CODE_ENUM } from 'lib/constants';
import { Document, Types } from 'mongoose';

export type DriverDocument = Driver & Document;

@Schema({
  timestamps: true,
  versionKey: false,
  toJSON: { virtuals: true },
  toObject: { virtuals: true },
})
export class Driver {
  @Prop({ type: Types.ObjectId, ref: 'Company', required: true })
  companyId: Types.ObjectId;

  @Prop({ required: true, unique: true })
  driverNumber: string; // System generated

  @Prop({ enum: ['male', 'female', 'other'] })
  @IsEnum(['male', 'female', 'other'])
  gender: string;

  @Prop()
  firstName: string;

  @Prop()
  lastName: string;

  @Prop()
  faceID: string;

  @Prop()
  phoneNumber: string;

  @Prop()
  whatsappNumber: string;

  @Prop()
  dateOfBirth: Date;

  @Prop({ unique: true })
  email: string;

  @Prop()
  idNumber: string;

  @Prop({ unique: true })
  licenseNumber: string;

  @Prop({
    enum: LICENSE_CODE_ENUM,
  })
  @IsEnum(LICENSE_CODE_ENUM)
  licenseCode: string;

  @Prop({
    enum: [0, 1, 2, 3, 4, 5, 7],
  })
  @IsEnum([0, 1, 2, 3, 4, 5, 7])
  vehicleRestrictions: number;

  @Prop({
    enum: [0, 1, 2],
  })
  @IsEnum([0, 1, 2])
  driverRestrictions: number;

  @Prop({
    enum: ['za', 'custom'],
  })
  @IsEnum(['za', 'custom'])
  issuingAuthority: string;

  @Prop()
  @IsDateString()
  prDpExpiryDate: Date; // Auto-generated by timestamps

  @Prop()
  address: string;

  @Prop({
    enum: REGION_ENUM,
  })
  @IsEnum(REGION_ENUM)
  region: string;

  @Prop()
  nationality: string;

  @Prop()
  @IsDateString()
  licenseValidFrom: Date;

  @Prop()
  @IsDateString()
  licenseValidTo: Date;

  @Prop({
    type: {
      goods: { type: Boolean, default: false },
      passengers: { type: Boolean, default: false },
      dangerousGoods: { type: Boolean, default: false },
    },
    default: {
      goods: false,
      passengers: false,
      dangerousGoods: false,
    },
    _id: false,
  })
  prDpCategories: {
    goods: boolean;
    passengers: boolean;
    dangerousGoods: boolean;
  };

  @Prop()
  @IsString()
  photoUrl: string;

  @Prop()
  @IsString()
  copyFrontDriversLicense: string;

  @Prop()
  @IsString()
  copyRearDriversLicense: string;

  @Prop()
  @IsString()
  licenseFrontUrl: string;

  @Prop()
  @IsString()
  licenseBackUrl: string;

  @Prop({ required: true, default: true })
  @IsBoolean()
  isActive: boolean;
}

export const DriverSchema = SchemaFactory.createForClass(Driver);

// Add virtual field for company
DriverSchema.virtual('company', {
  ref: 'Company',
  localField: 'companyId',
  foreignField: '_id',
  justOne: true,
});
